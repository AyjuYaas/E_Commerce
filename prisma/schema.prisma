// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) //Create an id that is collision resisted, i.e. cuid
  name String
  email String @unique 
  password String
  dob DateTime
  createdAt DateTime @default(now())

  // Relations
  cartItems Cart[]
  reviews Review[]
  orders Order[]
}

model Product {
  id String @id @default(cuid())
  name  String
  category ProductCategory
  price Float
  quantity Int
  description String
  image String
  createdAt DateTime @default(now())

  // Relations
  carts Cart[]
  reviews Review[]
  orderItems OrderItem[]

  @@index([category])
}

model Cart {
  id String @id @default(cuid())
  userId String
  productId String
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // cascade delete means delete all cart items if the user is deleted
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Review {
  id String @id @default(cuid())
  userId String
  productId String
  comment String
  rating Int 
  image String?
  createdAt DateTime @default(now())

  // Relations 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId, productId])
  @@unique([userId, productId])
}

model Order {
  id String @id @default(cuid())
  userId String
  totalAmount Float
  location String
  phone String
  status OrderStatus @default(PENDING)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  items OrderItem[]
  payment Payment?
}

model OrderItem {
  id String @id @default(cuid())
  orderId String
  productId String
  quantity Int
  price Float

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Payment {
  id String @id @default(cuid())
  orderId String @unique
  amount Float
  status PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ProductCategory {
  SHOES
  ELECTRONICS
  CLOTHES
  GROCERIES
  BOOKS
  FURNITURE
  BEAUTY
  PETSUPPLIES
}
